import os
import logging
from telegram import ChatPermissions, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram.ext.callbackcontext import CallbackContext
from telegram.error import BadRequest, TelegramError
from telegram.utils.helpers import mention_html

# ====== Config ======
# –¢–æ–∫–µ–Ω —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN (Railway ‚Üí Variables)
TOKEN = os.getenv("TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∏–¥–Ω–æ –≤ Railway logs)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ (–Ω–æ–≤–∏—á–æ–∫ = mute)
restricted_permissions = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_invite_users=False,
)

# –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ (—Ä–∞–∑–º—É—Ç)
full_permissions = ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_invite_users=True,
)

def is_user_admin(context: CallbackContext, chat_id: int, user_id: int) -> bool:
    try:
        member = context.bot.get_chat_member(chat_id, user_id)
        return member.status in ("creator", "administrator")
    except TelegramError as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)
        return False

# –ö–æ–≥–¥–∞ –Ω–æ–≤—ã–π —é–∑–µ—Ä –∑–∞—Ö–æ–¥–∏—Ç ‚Üí –º—É—Ç–∏–º
def welcome(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    for member in update.message.new_chat_members:
        try:
            context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=member.id,
                permissions=restricted_permissions,
            )
            update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {mention_html(member.id, member.full_name)}! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞.",
                parse_mode="HTML",
            )
            logger.info("–ó–∞–º—É—Ç–∏–ª–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ %s (%s) –≤ —á–∞—Ç–µ %s", member.full_name, member.id, chat_id)
        except BadRequest as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", member.id, e)
        except TelegramError as e:
            logger.exception("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)

# –ö–æ–º–∞–Ω–¥–∞ /approve ‚Üí —Ä–∞–∑–º—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
def approve(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    from_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if not is_user_admin(context, chat_id, from_id):
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø.")
        return

    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        user_id = target_user.id
        username_html = mention_html(target_user.id, target_user.full_name)
    else:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π /approve –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–º—É—Ç–∏—Ç—å.")
        return

    try:
        context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=full_permissions,
        )
        update.message.reply_text(f"‚úÖ {username_html} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø!", parse_mode="HTML")
        logger.info("–†–∞–∑–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%s) –≤ —á–∞—Ç–µ %s", target_user.full_name, user_id, chat_id)
    except BadRequest as e:
        update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø: {e}")
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)
    except TelegramError as e:
        logger.exception("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤: %s", e)

def error_handler(update: object, context: CallbackContext):
    logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", context.error)

def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –í Railway –¥–æ–±–∞–≤—å Variable: TOKEN=<—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω>.")

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, welcome))
    dp.add_handler(CommandHandler("approve", approve))
    dp.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è‚Ä¶")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
